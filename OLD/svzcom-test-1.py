'''
Требуется разработать сетевое приложение и реализовать асинхронный
режим работы с логикой задаваемой генератором.

Детальные требования:
1.	Логика сетевого клиента: 3 или более последовательных HTTP запроса
с анализом полученных данных.
 -- попробовать реализацию с чтением списка запроса из файла.
 -- Подключение к сайтам, через запрос получение данных, сохраниение и систематизация полученных данных.
 -- 3 запроса к 1 сайту, друг за другом. (Доступ, скачивание данных, ???)

2.	Логика сетевого клиента должна быть реализована в виде генератора.
 -- функция, которая будет выполняться до yield, и ожидать, последующего выполнения
 -- Возможные этапы: инит, подключение, {запрос, обработка} х3, результат.

3.	Одновременное выполнение нескольких логических цепочек (генераторов).
 -- Асинхронное выполнение. Генераторы асинхронно поставить в event loop.

4.	По окончанию выполнения всех логических цепочек,
вывести результат работы в STDOUT и завершить работу приложения.
 -- Вывод в консоль результата работы только после опроса данных.
 -- И закрыться... Хм.

5.	Максимальное количество потоков для приложения: 1
 -- Нельзя использовать Tread-методы с созданием дополнительных потоков.

6.	Основной поток должен блокироваться только для ожидания
сетевых событий или таймеров.
 -- По сути, главный реализатор не должен блокироваться другими потоками?
 -- Не понятно...

7.	Реализация сетевого уровня: на уровне сокетов.
 -- Сокеты - такое себе... Особенно при подключении
к дургим машиннам по стандартным протоколам. Странно, что нельзя реализовать через стандартные библиотеки подключений, которые так же
работают на сокетах, только синтаксис уже выверен...

8.	Реализация HTTP протокола: на усмотрение исполнителя.
 --

9.	HTTP ресурс для запроса и анализ полученных данных:
на усмотрение исполнителя (Любой подходящий ресурс в интернете).
 -- Пробдема подбора ресурсов, так как ручноая проверка подключения к сайту
 рубит мое подключение с ошибкой 497 (не на всех сайтах), что вроде как обозначет, что меня подозревают в ddos-атаке...

10.	Реализация диспетчера обработки асинхронных событий:
на основе select или иного аналогичного механизма
для асинхронной работы с сокетами.

11.	Формат входных данных, таких как HTTP ресурс, количество одновременных
логических цепочек и иная информация: на усмотрение исполнителя.

12.	Требование к версии python: не выше 3.6.
 -- Ок

13.	Результат работы представить в виде архива с
python приложением и краткой инструкцией.
 -- Ок

14.	Результат работы предоставить на электронную почту
и позвонить по телефону, сообщить, что отправили.
 -- Ок
-------------------------------------------------------------
Сетевое приложение: Клиент <==> Сервер
Асинхронный режим: Выполнение нескольких задач через переключение
контекста задачи из приоритетов.
Cообщения должны быть либо определенной фиксированной длины,
либо разделены на несколько частей маркерами,
либо с указанием длины сообщения (что намного лучше),
либо заканчиваться отключением соединения.

Select
import select
r, w, x = select.select(rlist, wlist, xlist[, timeout])
Функция select() модуля select представляет простой интерфейс
для системного вызова Unix select(). Подробнее о системном
вызове Unix select() можно посмотреть командой терминала $ man select.

Первые три аргумента функция модуля select.select()
являются итерациями "ожидаемых объектов":
либо целых чисел, представляющих файловые дескрипторы,
либо объектов с методом без параметров с именем file.fileno(),
возвращающим такое целое число:
    rlist: список объектов, по готовности из которых нужно
    что-то прочитать,
    wlist: список объектов, по готовности в которые нужно
    что-то записать,
    xlist: список объектов, в которых возможно будут ошибки
Пустые списки разрешены, но принятие трех пустых списков
зависит от платформы. Известно, что такое поведение работает в Unix,
но не в Windows.

Генератор.
 - Генератор — это объект, который сразу при создании не вычисляет значения
всех своих элементов.
 - Он хранит в памяти только последний вычисленный элемент,
правило перехода к следующему и условие, при котором выполнение прерывается.
 - Вычисление следующего значения происходит лишь при выполнении метода next() или автоматически в цикле for
Предыдущее значение при этом теряется.

Общий вид:
(выражение for j in итерируемый объект if условие)
Где for, in, if — ключевые слова, j — переменная.

Цикл событий (event loop) - по большей части всего лишь управляет
выполнением различных задач: регистрирует поступление и запускает в подходящий момент.

Корутины — специальные функции, похожие на генераторы python,
от которых ожидают (await), что они будут отдавать управление обратно в цикл событий.
Необходимо, чтобы они были запущены именно через цикл событий.

Футуры — объекты, в которых хранится текущий результат выполнения какой-либо задачи.
Это может быть информация о том, что задача ещё не обработана или уже полученный результат,
а может быть вообще исключение.
Состояния футур:
    ожидание (pending)
    выполнение (running)
    выполнено (done)
    отменено (cancelled)

RuntimeError: This event loop is already running
Эта ошибка вылетает в редакторе из за того, что редактор сам по себе уже
запустил свой собстввенный эвент-луп и он предупреждает, что закрыть новый цикл
не возможно. При запуске через консоль таких приколов нет.

Сокет — это программный интерфейс для обеспечения
информационного обмена между процессами.

Пример HTTP-взаимодействия
Запрос:
    GET /index.php HTTP/1.1
    Host: example.com
    User-Agent: Mozilla/5.0 (X11; U; Linux i686; ru; rv:1.9b5) Gecko/2008050509 Firefox/3.0b5
    Accept: text/html
    Connection: close

Первая строка — это строка запроса, остальные — заголовки; тело сообщения отсутствует

Ответ:
    HTTP/1.0 200 OK
    Server: nginx/0.6.31
    Content-Language: ru
    Content-Type: text/html; charset=utf-8
    Content-Length: 1234
    Connection: close

... САМА HTML-СТРАНИЦА ...
Для разграничения действий с ресурсами на уровне HTTP-методов
и были придуманы следующие варианты:
    GET — получение ресурса
    POST — создание ресурса
    PUT — обновление ресурса
    DELETE — удаление ресурса

'''

